#include <IterativeRobot.h>
#include <Joystick.h>
#include <Solenoid.h>
#include <DoubleSolenoid.h>
#include <LiveWindow/LiveWindow.h>
#include <RobotDrive.h>
#include <Timer.h>

//连接设定
const int BotCogSolenoidBut=2;
const int BotCogSolenoidPin=0;
const int UpCogSolenoidBut=1;
const int UpCogSolenoidPin=1;



class Robot: public frc::IterativeRobot {
public:
	Robot() {
		myRobot.SetExpiration(0.1);
		timer.Start();
	}

private:
	frc::RobotDrive myRobot { 0, 1 };  // Robot drive system
	frc::Joystick stick { 0 };         // Only joystick
	frc::LiveWindow* lw = frc::LiveWindow::GetInstance();
	frc::Timer timer;
	frc::Solenoid BotCogSolenoid {BotCogSolenoidPin};
	frc::Solenoid UpCogSolenoid {UpCogSolenoidPin};

	bool PreBotBut=false;
	bool PreUpBot=false;
	bool BotDown=false;
	bool UpDown=false;

	void AutonomousInit() override {
		timer.Reset();
		timer.Start();
	}

	void AutonomousPeriodic() override {
		// Drive for 2 seconds
		if (timer.Get() < 2.0) {
			myRobot.Drive(-0.5, 0.0);  // Drive forwards half speed
		} else {
			myRobot.Drive(0.0, 0.0);  // Stop robot
		}
	}

	void TeleopInit() override {

	}

	void TeleopPeriodic() override {
		// Drive with arcade style (use right stick)
		myRobot.ArcadeDrive(stick);

		bool ThisBotBut;
		bool ThisUpBut;

		ThisBotBut=stick.GetRawButton(BotCogSolenoidBut);
		ThisUpBut=stick.GetRawButton(UpCogSolenoidBut);

		if((ThisBotBut==true)&&(PreBotBut==false)){
			BotDown=!BotDown;
		}
		if((ThisUpBut==true)&&(PreUpBut==false)){
			UpDown=!UpDown;
		}
		BotCogSolenoid.Set(BotDown);
		UpCogSolenoid.Set(UpDown);

		PreBotBut=ThisBotBut;
		PreUpBut=ThisUpBut;
	}


	void TestPeriodic() override {
		lw->Run();
	}
};

START_ROBOT_CLASS(Robot)
